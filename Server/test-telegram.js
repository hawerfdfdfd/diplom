// test-telegram.js
require("dotenv").config();
const axios = require("axios");

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_API_BASE = `https://api.telegram.org/bot${BOT_TOKEN}`;

async function testPolling() {
  try {
    // 1. –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    await axios.get(`${TELEGRAM_API_BASE}/getUpdates?offset=-1`);
    console.log("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞");

    // 2. –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const response = await axios.get(
      `${TELEGRAM_API_BASE}/getUpdates?offset=0`
    );
    console.log(
      "üì© –û—Ç–≤–µ—Ç –æ—Ç Telegram:",
      JSON.stringify(response.data, null, 2)
    );

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç
    if (!response.data.ok && response.data.error_code === 409) {
      console.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å–µ—Å—Å–∏–π!");
    } else {
      console.log("üéâ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤!");
    }
  } catch (error) {
    console.error(
      "üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:",
      error.response?.data || error.message
    );
  }
}

testPolling();