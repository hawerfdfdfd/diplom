require("dotenv").config();
const axios = require("axios");
const mysql = require("mysql");

console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è telegram-handler.js");

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞
if (global.telegramHandlerStarted) {
  console.warn("Telegram handler —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç");
  return;
}
global.telegramHandlerStarted = true;

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
if (!BOT_TOKEN) {
  console.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! Telegram polling –æ—Ç–∫–ª—é—á–µ–Ω.");
  return;
}

console.log("–¢–æ–∫–µ–Ω –±–æ—Ç–∞:", BOT_TOKEN.slice(0, 10) + "...");

const TELEGRAM_API_BASE = `https://api.telegram.org/bot${BOT_TOKEN}`;
console.log("Telegram API Base:", TELEGRAM_API_BASE);

let pollingTimeout = null;
let isPollingActive = true;
let lastUpdateId = 0;
let isActive = true;
const RETRY_DELAY = 10000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
const db = mysql.createConnection({
  user: "root",
  host: "localhost",
  password: "",
  database: "store",
  multipleStatements: true,
});

db.connect((err) => {
  if (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err.message);
  } else {
    console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î");
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã employees
    db.query("SELECT COUNT(*) AS count FROM employees", (err, result) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã employees:", err);
      } else {
        console.log(`–í —Ç–∞–±–ª–∏—Ü–µ employees ${result[0].count} –∑–∞–ø–∏—Å–µ–π`);
      }
    });
  }
});

// –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
const { sendTelegramMessage } = require("./telegram");

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–æ—Å–∞ Telegram
 */
async function safePollTelegram() {
  if (!isPollingActive) return;

  try {
    // console.log(`üîÑ –û–ø—Ä–æ—Å Telegram (offset: ${lastUpdateId + 1})`);
    const url = `${TELEGRAM_API_BASE}/getUpdates?timeout=10&limit=10&offset=${
      lastUpdateId + 1
    }`;
    // console.log("–ó–∞–ø—Ä–æ—Å –∫ Telegram:", url);

    const { data } = await axios.get(url, {
      timeout: 15000,
    });

    console.log("–û—Ç–≤–µ—Ç Telegram:", JSON.stringify(data, null, 2));

    if (!data.ok) {
      if (data.error_code === 409) {
        throw new Error("CONFLICT_409");
      }
      console.warn("–û—à–∏–±–∫–∞ Telegram API:", data);
      return;
    }

    if (data.result && data.result.length > 0) {
      console.log(`–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${data.result.length}`);
      for (const upd of data.result) {
        lastUpdateId = Math.max(lastUpdateId, upd.update_id);

        const message = upd.message;
        if (!message || !message.text) continue;

        console.log(
          `–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.text} –æ—Ç ${message.chat.id}`
        );

        if (message.text === "/test") {
          await sendTelegramMessage(
            message.chat.id,
            "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í–∞—à chat_id: " + message.chat.id
          );
          continue;
        }

        if (message.text.startsWith("/bind")) {
          processBindCommand(message);
        }
      }
    } else {
      console.log("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π");
    }
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ Telegram:", e.message);

    if (
      e.message === "CONFLICT_409" ||
      (e.response && e.response.data && e.response.data.error_code === 409)
    ) {
      console.error("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å–µ—Å—Å–∏–∏. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10s...");
      stopPolling();
      await new Promise((r) => setTimeout(r, RETRY_DELAY));
      startPolling();
      return; // –í–∞–∂–Ω–æ: –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
    }
  } finally {
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ polling –∞–∫—Ç–∏–≤–µ–Ω
    if (isPollingActive) {
      pollingTimeout = setTimeout(safePollTelegram, 3000);
    }
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /bind
 */
async function processBindCommand(message) {
  try {
    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /bind: ${message.text}`);

    const text = message.text.trim();
    const parts = text.split(/\s+/);

    if (parts.length < 2) {
      console.log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /bind");
      await sendTelegramMessage(
        message.chat.id,
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/bind –≤–∞—à_email@–ø—Ä–∏–º–µ—Ä.com</code>`
      );
      return;
    }

    const rawEmail = parts[1].trim().toLowerCase();
    const chatId = message.chat.id;

    console.log(`–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å email: ${rawEmail}`);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
    const findEmployee = () =>
      new Promise((resolve, reject) => {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–° - –∏—Å–ø–æ–ª—å–∑—É–µ–º employee_id –≤–º–µ—Å—Ç–æ id
        const findSql = `SELECT employee_id FROM employees WHERE email = ? LIMIT 1`;
        db.query(findSql, [rawEmail], (err, rows) => {
          if (err) return reject(err);
          resolve(rows);
        });
      });

    const rows = await findEmployee();
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: ${rows.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`);

    if (!rows.length) {
      await sendTelegramMessage(
        chatId,
        `‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å email <b>${rawEmail}</b>.`
      );
      return;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û - –ø–æ–ª—É—á–∞–µ–º employee_id –≤–º–µ—Å—Ç–æ id
    const employeeId = rows[0].employee_id;
    console.log(`–ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ID: ${employeeId}`);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏
    const upsertLink = () =>
      new Promise((resolve, reject) => {
        const upsertSql = `
        INSERT INTO telegram_links (employee_id, telegram_chat_id)
        VALUES (?, ?)
        ON DUPLICATE KEY UPDATE
          telegram_chat_id = VALUES(telegram_chat_id),
          updated_at = CURRENT_TIMESTAMP
      `;
        db.query(upsertSql, [employeeId, chatId], (err) => {
          if (err) return reject(err);
          resolve();
        });
      });

    await upsertLink();
    console.log(
      `–ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ${employeeId} -> chat_id ${chatId}`
    );

    await sendTelegramMessage(
      chatId,
      `‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.`
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /bind:", error);
    await sendTelegramMessage(
      message.chat.id,
      `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
    );
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å
 */
function startPolling() {
  stopPolling(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
  isPollingActive = true;

  console.log("üü¢ –ó–ê–ü–£–°–ö POLLING...");

  // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
  axios
    .get(`${TELEGRAM_API_BASE}/getUpdates?offset=-1`)
    .then(() => {
      console.log("‚úÖ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞");
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –æ–ø—Ä–æ—Å –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
      safePollTelegram();
    })
    .catch((e) => {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏:", e.message);
      // –í—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å
      safePollTelegram();
    });
}
/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø—Ä–æ—Å
 */
function stopPolling() {
  isPollingActive = false;
  if (pollingTimeout) {
    clearTimeout(pollingTimeout);
    pollingTimeout = null;
    console.log("üõë POLLING –û–°–¢–ê–ù–û–í–õ–ï–ù");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.on("SIGINT", () => {
  console.log("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
  stopPolling();
  db.end();
  process.exit(0);
});

process.on("SIGTERM", () => {
  console.log("\n–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...");
  stopPolling();
  db.end();
  process.exit(0);
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  startPolling,
  stopPolling,
};
